defmodule Slate.Repo.Migrations.AddAddressesToEntities do
  use Ecto.Migration

  def change do
    create table(:addresses, primary_key: false) do

      add :id, :binary_id, primary_key: true, null: false,
          comment: "PK"

      add :entity_id,
          references(:entities, [type: :binary_id, on_delete: :delete_all]),
          null:       false,
          comment:    "FK to ENTITIES table"

      # TODO extend the list of fields with
      #
      #      (1) USPS API standard fields
      #          https://www.usps.com/business/web-tools-apis/address-information-api.htm
      #
      #      (2) check out `civicrm_address` table

      # TODO  Create an Elixir app for the USPS API and publish it on hexpm. It will be
      #       used from then on to standardize the address that is being input to help
      #       catching duplicates.
      add :name,            :text,    comment: "Name at address"
      add :street_address,  :text
      add :city,            :text
      add :state,           :text
      add :zip5,            :serial,  comment: "5 digit US postal code"

      add :county,          :text,
          comment: "County, autogenerated from the USPS response."

      add :unit,            :text,
          comment: "Secondary unit designator, e.g. Apt 3 or Unit # 14, " <>
                  "or Bldg 1200"

      add :is_primary, :boolean, default: false, null: false,
          comment: "Denotes primary address"

      # TODO Even though, this is a foreign key, it should be optionally
      #      nullable. Test it.
      #      https://stackoverflow.com/questions/23325838
      add :address_types_id,
          references(:address_types, [type: :binary_id, on_delete: :nilify_all]),
          comment: "Associate an address type with the address. (May be NULL.)"

          # TODO add living_status (formerly living_arrangements) and figure out
          #      how it should be used with "homeless" status because it would
          #      also mean that they are living with someone at that address.
      timestamps()
    end

    execute "COMMENT ON TABLE addresses IS "                   <>
            "'(ENTITIES |--<| ADDRESSES) Addresses associated" <>
            " with a specific entity'"

    create unique_index(
      :addresses,
      [:entity_id, :street_address, :city, :state, :zip5, :county],
      comment: "Prevent duplicate addresses for EACH entity.")

    create unique_index(
      :addresses,
      [:entity_id, :is_primary],
      where:   "is_primary = true",
      comment: "Only ONE primary address for EACH entity.")
  end
end
